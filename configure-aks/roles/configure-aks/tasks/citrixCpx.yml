- name: Set fact for citrixCpx tempdir
  set_fact:
    citrixCpxTempDir: "/tmp/citrixCpx-{{ ansible_date_time.iso8601_basic_short }}"
  tags:
    - citrixCpx

- name: Add citrixCpx namespace
  k8s:
    kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
    state: "{{ configuration.citrixCpx.state }}"
    definition:
      apiVersion: v1
      kind: Namespace
      metadata:
        name: "{{ configuration.citrixCpx.namespace }}"
        labels: "{{ configuration.citrixCpx.labels | combine({'name': configuration.citrixCpx.namespace}) }}"
  tags:
    - citrixCpx

- name: Copy templates and apply
  block:
    - name: Create citrixCpx temp dir
      file:
        path: "{{ citrixCpxTempDir }}"
        state: directory
        mode: 0755
      changed_when: false
      tags:
        - citrixCpx

    - name: Copy citrixCpx manifest jinja2 templates
      template:
        src: "citrixCpx.yaml.j2"
        dest: "{{ citrixCpxTempDir }}/citrixCpx.yaml"
      changed_when: false
      tags:
        - citrixCpx

    - name: Create CPX configuration
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: "{{ configuration.citrixCpx.state }}"
        namespace: "{{ configuration.citrixCpx.namespace }}"
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: cpx-configurations
          data:
            cpx.conf: |
              #NetScaler Commands
              set ssl param -defaultProfile ENABLED

              add ssl cipher cpx-ciphers
              bind ssl cipher cpx-ciphers -cipherName TLS1.2-ECDHE-RSA-CHACHA20-POLY1305 -cipherPriority 1
              bind ssl cipher cpx-ciphers -cipherName TLS1.2-DHE-RSA-CHACHA20-POLY1305 -cipherPriority 2
              bind ssl cipher cpx-ciphers -cipherName TLS1.2-ECDHE-RSA-AES256-GCM-SHA384 -cipherPriority 3
              bind ssl cipher cpx-ciphers -cipherName TLS1.2-ECDHE-RSA-AES128-GCM-SHA256 -cipherPriority 4
              bind ssl cipher cpx-ciphers -cipherName TLS1.2-DHE-RSA-AES256-GCM-SHA384 -cipherPriority 5
              bind ssl cipher cpx-ciphers -cipherName TLS1.2-DHE-RSA-AES128-GCM-SHA256 -cipherPriority 6

              set ssl profile ns_default_ssl_profile_frontend -dhCount 1000 -dh ENABLED -dhFile /cpxsecret/dhkey -denySSLReneg NONSECURE -snienable ENABLED -HSTS ENABLED -maxage 157680000 -IncludeSubdomain no -tls1 DISABLED -tls11 DISABLED
              unbind ssl profile ns_default_ssl_profile_frontend -cipherName FlushAllCiphers
              bind ssl profile ns_default_ssl_profile_frontend -cipherName cpx-ciphers -cipherPriority 1

              add rewrite action rwa-add-xff insert_http_header X-Forwarded-For client.ip.src
              add rewrite action rwa-replace-xff replace "HTTP.REQ.HEADER(\"X-Forwarded-For\")" "HTTP.REQ.HEADER(\"X-Forwarded-For\").APPEND(\",\").APPEND(CLIENT.IP.SRC)"
              add rewrite action rwa-add-xfp_http insert_http_header X-Forwarded-Proto "\"http\""
              add rewrite action rwa-replace-xfp_http replace "HTTP.REQ.HEADER(\"X-Forwarded-Proto\")" "\"http\""
              add rewrite action rwa-add-xfp_https insert_http_header X-Forwarded-Proto "\"https\""
              add rewrite action rwa-replace-xfp_https replace "HTTP.REQ.HEADER(\"X-Forwarded-Proto\")" "\"https\""

              add rewrite policy rwp-add-xff "HTTP.REQ.HEADER(\"X-Forwarded-For\").EXISTS.NOT" rwa-add-xff
              add rewrite policy rwp-replace-xff "HTTP.REQ.HEADER(\"X-Forwarded-For\").EXISTS" rwa-replace-xff
              add rewrite policy rwp-add-xfp_http "HTTP.REQ.HEADER(\"X-Forwarded-Proto\").EXISTS.NOT && CLIENT.SSL.IS_SSL.NOT" rwa-add-xfp_http
              add rewrite policy rwp-replace-xfp_http "HTTP.REQ.HEADER(\"X-Forwarded-For\").EXISTS && CLIENT.SSL.IS_SSL.NOT" rwa-replace-xfp_http
              add rewrite policy rwp-add-xfp_https "HTTP.REQ.HEADER(\"X-Forwarded-Proto\").EXISTS.NOT && CLIENT.SSL.IS_SSL" rwa-add-xfp_https
              add rewrite policy rwp-replace-xfp_https "HTTP.REQ.HEADER(\"X-Forwarded-For\").EXISTS && CLIENT.SSL.IS_SSL" rwa-replace-xfp_https

              bind rewrite global rwp-add-xff 10 NEXT -type REQ_DEFAULT
              bind rewrite global rwp-replace-xff 11 NEXT -type REQ_DEFAULT
              bind rewrite global rwp-add-xfp_http 12 NEXT -type REQ_DEFAULT
              bind rewrite global rwp-replace-xfp_http 13 NEXT -type REQ_DEFAULT
              bind rewrite global rwp-add-xfp_https 14 NEXT -type REQ_DEFAULT
              bind rewrite global rwp-replace-xfp_https 15 NEXT -type REQ_DEFAULT
      register: cpxConfigResult
      tags:
        - citrixCpx

    - name: Get CPX Secret
      k8s_info:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        api_version: v1
        kind: Secret
        namespace: "{{ configuration.citrixCpx.namespace }}"
        label_selectors:
          - app = cpx-ingress
          - type = dhkey
      register: cpxDhSecret
      tags:
        - citrixCpx

    - name: Generate Citrix CPX DH Key
      openssl_dhparam:
        path: "{{ citrixCpxTempDir }}/dhparams.pem"
        size: 2048
      when: cpxDhSecret.resources == []
      tags:
        - citrixCpx

    - name: Create k8s secret for cpx-ingress
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: "{{ configuration.citrixCpx.state }}"
        namespace: "{{ configuration.citrixCpx.namespace }}"
        definition:
          apiVersion: v1
          kind: Secret
          type: Opaque
          metadata:
            name: cpx-ingress
            labels:
              app: cpx-ingress
              type: dhkey
          data:
            dhkey: "{{lookup('file', citrixCpxTempDir + '/dhparams.pem') | b64encode }}"
      when: cpxDhSecret.resources == []
      tags:
        - citrixCpx

    - name: Apply citrixCpx manifest
      k8s:
        kubeconfig: "{{ configuration.k8sconfiguration.dest }}"
        state: "{{ configuration.citrixCpx.state }}"
        src: "{{ citrixCpxTempDir }}/citrixCpx.yaml"
        namespace: "{{ configuration.citrixCpx.namespace }}"
      tags:
        - citrixCpx

    - name: Restart citrixCpx deployment
      shell: '{{ kubectl.bin_directory }}/kubectl --kubeconfig="{{ configuration.k8sconfiguration.dest }}" --namespace={{ configuration.citrixCpx.namespace }} rollout restart deployment cpx-ingress'
      when:
        - configuration.citrixCpx.state == "present"
        - cpxConfigResult.changed
      tags:
        - citrixCpx

    - name: Delete citrixCpx temp dir
      file:
        path: "{{ citrixCpxTempDir }}"
        state: absent
      changed_when: false
      tags:
        - citrixCpx

  rescue:
    - name: Delete citrixCpx temp dir
      file:
        path: "{{ citrixCpxTempDir }}"
        state: absent
      changed_when: false
      tags:
        - citrixCpx

    - name: Fail
      fail:
        msg: "Rescue was invoked, failing task."
      tags:
        - citrixCpx
